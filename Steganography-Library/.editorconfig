# Rules in this file were initially inferred by Visual Studio IntelliCode from the C:\Users\djska\Documents\GitHub\Steganography-Library\Steganography-Library\ codebase based on best match to current usage at 2/22/2022
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]


#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - new line# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

#### Core EditorConfig Options ####

# Json files
[*.json]

# Indentation and spacing
indent_size = 2
indent_style = space
tab_width = 2

# C# files
[*.cs]

# Indentation and spacing
indent_size = 4
indent_style = space
tab_width = 4

# New line preferences
end_of_line = crlf
insert_final_newline = false

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = true
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent

# Expression-level preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true:suggestion

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = true:warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning

# Expression-bodied members
csharp_style_expression_bodied_accessors = false:warning
csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_indexers = false:warning
csharp_style_expression_bodied_lambdas = when_on_single_line:warning
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = false:warning

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_pattern_matching = true:warning
csharp_style_prefer_switch_expression = true:suggestion

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent

# Code-block preferences
csharp_prefer_braces = true:warning
csharp_prefer_simple_using_statement = true:suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_style_prefer_index_operator = false:warning
csharp_style_prefer_range_operator = false:warning
csharp_style_throw_expression = false:warning
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = none
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

#### Naming styles ####

# Naming rules

dotnet_naming_rule.const_should_be_const.severity = warning
dotnet_naming_rule.const_should_be_const.symbols = const
dotnet_naming_rule.const_should_be_const.style = const

dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private_or_internal_static_field_should_be_prefix__.severity = warning
dotnet_naming_rule.private_or_internal_static_field_should_be_prefix__.symbols = private_or_internal_static_field
dotnet_naming_rule.private_or_internal_static_field_should_be_prefix__.style = prefix__

dotnet_naming_rule.private_or_internal_field_should_be_prefix__.severity = warning
dotnet_naming_rule.private_or_internal_field_should_be_prefix__.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_prefix__.style = prefix__

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_field.required_modifiers = 

dotnet_naming_symbols.private_or_internal_static_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_static_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_static_field.required_modifiers = static

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

dotnet_naming_symbols.const.applicable_kinds = namespace, property, field, event, parameter, local, class, struct, interface, enum, delegate, method, local_function
dotnet_naming_symbols.const.applicable_accessibilities = *
dotnet_naming_symbols.const.required_modifiers = const

# Naming styles

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.prefix__.required_prefix = _
dotnet_naming_style.prefix__.required_suffix = 
dotnet_naming_style.prefix__.word_separator = 
dotnet_naming_style.prefix__.capitalization = camel_case

dotnet_naming_style.prefix_s_.required_prefix = _
dotnet_naming_style.prefix_s_.required_suffix = 
dotnet_naming_style.prefix_s_.word_separator = 
dotnet_naming_style.prefix_s_.capitalization = camel_case

dotnet_naming_style.const.required_prefix = 
dotnet_naming_style.const.required_suffix = 
dotnet_naming_style.const.word_separator = _
dotnet_naming_style.const.capitalization = all_upper

# C++ files
[*.{c++,cc,cpp,cxx,h,h++,hh,hpp,hxx,inl,ipp,tlh,tli}]

# var preferences
cpp_style_var_elsewhere = true:warning
cpp_style_var_for_built_in_types = true:warning
cpp_style_var_when_type_is_apparent = true:warning

# Expression-bodied members
cpp_style_expression_bodied_accessors = false:warning
cpp_style_expression_bodied_constructors = false:warning
cpp_style_expression_bodied_indexers = false:warning
cpp_style_expression_bodied_lambdas = when_on_single_line:warning
cpp_style_expression_bodied_local_functions = false:silent
cpp_style_expression_bodied_methods = false:silent
cpp_style_expression_bodied_operators = false:silent
cpp_style_expression_bodied_properties = false:warning

# Pattern matching preferences
cpp_style_pattern_matching_over_as_with_null_check = true:warning
cpp_style_pattern_matching_over_is_with_cast_check = true:warning
cpp_style_prefer_not_pattern = true:warning
cpp_style_prefer_pattern_matching = true:warning
cpp_style_prefer_switch_expression = true:suggestion

# Null-checking preferences
cpp_style_conditional_delegate_call = true:warning

# Modifier preferences
cpp_prefer_static_local_function = true:warning
cpp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent

# Code-block preferences
cpp_prefer_braces = true:warning
cpp_prefer_simple_using_statement = true:suggestion

# Expression-level preferences
cpp_prefer_simple_default_expression = true:warning
cpp_style_deconstructed_variable_declaration = true:suggestion
cpp_style_inlined_variable_declaration = true:warning
cpp_style_pattern_local_over_anonymous_function = true:warning
cpp_style_prefer_index_operator = false:warning
cpp_style_prefer_range_operator = false:warning
cpp_style_throw_expression = false:warning
cpp_style_unused_value_assignment_preference = discard_variable:warning
cpp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
cpp_using_directive_placement = outside_namespace:warning

# New line preferences
cpp_new_line_before_catch = true
cpp_new_line_before_else = true
cpp_new_line_before_finally = true
cpp_new_line_before_members_in_anonymous_types = true
cpp_new_line_before_members_in_object_initializers = true
cpp_new_line_before_open_brace = none
cpp_new_line_between_query_expression_clauses = true

# Indentation preferences
cpp_indent_block_contents = true
cpp_indent_braces = false
cpp_indent_case_contents = true
cpp_indent_case_contents_when_block = false
cpp_indent_labels = one_less_than_current
cpp_indent_switch_labels = true

# Space preferences
cpp_space_after_cast = false
cpp_space_after_colon_in_inheritance_clause = true
cpp_space_after_comma = true
cpp_space_after_dot = false
cpp_space_after_keywords_in_control_flow_statements = true
cpp_space_after_semicolon_in_for_statement = true
cpp_space_around_binary_operators = before_and_after
cpp_space_around_declaration_statements = false
cpp_space_before_colon_in_inheritance_clause = true
cpp_space_before_comma = false
cpp_space_before_dot = false
cpp_space_before_open_square_brackets = false
cpp_space_before_semicolon_in_for_statement = false
cpp_space_between_empty_square_brackets = false
cpp_space_between_method_call_empty_parameter_list_parentheses = false
cpp_space_between_method_call_name_and_opening_parenthesis = false
cpp_space_between_method_call_parameter_list_parentheses = false
cpp_space_between_method_declaration_empty_parameter_list_parentheses = false
cpp_space_between_method_declaration_name_and_open_parenthesis = false
cpp_space_between_method_declaration_parameter_list_parentheses = false
cpp_space_between_parentheses = false
cpp_space_between_square_brackets = false

# Wrapping preferences
cpp_preserve_single_line_blocks = true
cpp_preserve_single_line_statements = false
 options

#place else statements on a new line
csharp_new_line_before_else = true
#require members of object initializers to be on the same line
csharp_new_line_before_members_in_object_initializers = false
#require braces to be on a new line for methods, types, and control_blocks (also known as "Allman" style)
csharp_new_line_before_open_brace = methods, types, control_blocks

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true

#Style - Code block preferences

#prefer no curly braces if allowed
csharp_prefer_braces = false:suggestion

#Style - expression bodied member options

#prefer expression-bodied members for constructors
csharp_style_expression_bodied_constructors = true:suggestion
#prefer expression-bodied members for methods
csharp_style_expression_bodied_methods = true:suggestion
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - Expression-level  preferences

#prefer objects to not be initialized using object initializers
dotnet_style_object_initializer = false:suggestion

#Style - implicit and explicit types

#prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:suggestion
#prefer explicit type over var to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = false:suggestion
#prefer explicit type over var when the type is already mentioned on the right-hand side of a declaration
csharp_style_var_when_type_is_apparent = false:suggestion

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,static:suggestion

#Style - qualification options

#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion
